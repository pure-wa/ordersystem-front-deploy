{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getErrorMessage } from '@/utils/commonDataHandler';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: \"\",\n      category: \"\",\n      price: null,\n      stockQuantity: null,\n      productImage: null\n    };\n  },\n  methods: {\n    fileUpload(event) {\n      // 여러 개의 상품일 경우 for문을 실행하여 productImage에 값 할당\n      this.productImage = event.target.files[0];\n    },\n    async productCreate() {\n      try {\n        // multi-part form data 또는 url인코딩 방식인 경우에 FormData 클래스 사용해서 객체 조립\n        let data = new FormData();\n        data.append(\"name\", this.name);\n        data.append(\"category\", this.category);\n        data.append(\"price\", this.price);\n        data.append(\"stockQuantity\", this.stockQuantity);\n        data.append(\"productImage\", this.productImage);\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/product/create`, data);\n        this.$router.push(\"/product/manage\");\n      } catch (e) {\n        console.log(getErrorMessage(e));\n      }\n    }\n  }\n};","map":{"version":3,"names":["getErrorMessage","axios","data","name","category","price","stockQuantity","productImage","methods","fileUpload","event","target","files","productCreate","FormData","append","post","process","env","VUE_APP_API_BASE_URL","$router","push","e","console","log"],"sources":["/Users/purewa/Desktop/Pratice/dev front/src/views/ProductCreate.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row justify=\"center\">\n            <v-col cols=\"6\">\n                <v-card>\n                    <v-card-title class=\"text-h5 text-center\">\n                        상품등록\n                    </v-card-title>\n                    <v-card-text>\n                        <v-form>\n                            <v-text-field\n                                label=\"상품명\"\n                                v-model=\"name\"\n                            />\n                            <v-text-field\n                                label=\"카테고리\"\n                                v-model=\"category\"\n                            />\n                            <v-text-field\n                                label=\"가격\"\n                                v-model.number=\"price\"\n                            />\n                            <v-text-field\n                                label=\"재고수량\"\n                                v-model.number=\"stockQuantity\"\n                            />\n                            <v-file-input\n                                label=\"상품이미지\"\n                                v-model=\"productImage\"\n                                accept=\"image/**\"\n                                @change=\"fileUpload\"\n                                multiple\n                            />\n                            <v-row>\n                                <v-col>\n                                    <!-- block : 속한 row에서 너비를 꽉채우는 옵션이다 -->\n                                    <v-btn @click=\"productCreate()\" color=\"primary\" block=\"\">\n                                        등록\n                                    </v-btn>\n                                </v-col>\n                            </v-row>\n                        </v-form>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n<script>\nimport { getErrorMessage } from '@/utils/commonDataHandler';\nimport axios from 'axios';\n\n    export default {\n        data() {\n            return {\n                name:\"\",\n                category:\"\",\n                price:null,\n                stockQuantity:null,\n                productImage:null,\n            }\n        },\n        methods: {\n            fileUpload(event) {\n                // 여러 개의 상품일 경우 for문을 실행하여 productImage에 값 할당\n                this.productImage = event.target.files[0];\n\n            },\n            async productCreate() {\n                try {\n                    // multi-part form data 또는 url인코딩 방식인 경우에 FormData 클래스 사용해서 객체 조립\n                let data = new FormData();\n                data.append(\"name\", this.name);\n                data.append(\"category\", this.category);\n                data.append(\"price\", this.price);\n                data.append(\"stockQuantity\", this.stockQuantity);\n                data.append(\"productImage\", this.productImage);\n                await axios.post(`${process.env.VUE_APP_API_BASE_URL}/product/create`, data);\n                this.$router.push(\"/product/manage\");\n                } catch(e) {\n                    console.log(getErrorMessage(e));\n                }\n            },\n        }\n    }\n</script>"],"mappings":";AAiDA,SAASA,eAAc,QAAS,2BAA2B;AAC3D,OAAOC,KAAI,MAAO,OAAO;AAErB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAC,EAAE;MACPC,QAAQ,EAAC,EAAE;MACXC,KAAK,EAAC,IAAI;MACVC,aAAa,EAAC,IAAI;MAClBC,YAAY,EAAC;IACjB;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,UAAUA,CAACC,KAAK,EAAE;MACd;MACA,IAAI,CAACH,YAAW,GAAIG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAE7C,CAAC;IACD,MAAMC,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA;QACJ,IAAIX,IAAG,GAAI,IAAIY,QAAQ,CAAC,CAAC;QACzBZ,IAAI,CAACa,MAAM,CAAC,MAAM,EAAE,IAAI,CAACZ,IAAI,CAAC;QAC9BD,IAAI,CAACa,MAAM,CAAC,UAAU,EAAE,IAAI,CAACX,QAAQ,CAAC;QACtCF,IAAI,CAACa,MAAM,CAAC,OAAO,EAAE,IAAI,CAACV,KAAK,CAAC;QAChCH,IAAI,CAACa,MAAM,CAAC,eAAe,EAAE,IAAI,CAACT,aAAa,CAAC;QAChDJ,IAAI,CAACa,MAAM,CAAC,cAAc,EAAE,IAAI,CAACR,YAAY,CAAC;QAC9C,MAAMN,KAAK,CAACe,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,iBAAiB,EAAEjB,IAAI,CAAC;QAC5E,IAAI,CAACkB,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;MACpC,EAAE,OAAMC,CAAC,EAAE;QACPC,OAAO,CAACC,GAAG,CAACxB,eAAe,CAACsB,CAAC,CAAC,CAAC;MACnC;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}