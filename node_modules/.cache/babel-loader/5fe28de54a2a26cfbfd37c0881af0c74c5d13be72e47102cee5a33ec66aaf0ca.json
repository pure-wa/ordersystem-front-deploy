{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  },\n  methods: {\n    async memberCreate() {\n      // 입력값 검증\n      if (!this.name || !this.email || !this.password) {\n        alert('모든 필드를 입력해주세요.');\n        return;\n      }\n      const data = {\n        name: this.name,\n        email: this.email,\n        password: this.password\n      };\n      try {\n        console.log('전송 데이터:', data);\n        const response = await axios.post(\"http://localhost:8080/member/create\", data);\n        console.log('성공 응답:', response);\n        alert('회원가입이 성공했습니다!');\n        // 로그인 페이지로 이동\n        this.$router.push('/member/login');\n      } catch (error) {\n        console.error('전체 오류:', error);\n        if (error.response) {\n          console.error('상태코드:', error.response.status);\n          console.error('오류 데이터:', error.response.data);\n\n          // 백엔드에서 보낸 오류 메시지 표시\n          const errorMessage = error.response.data.message || '회원가입에 실패했습니다.';\n          alert(errorMessage);\n        } else {\n          console.error('네트워크 오류:', error.message);\n          alert('서버 연결에 실패했습니다.');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","email","password","methods","memberCreate","alert","console","log","response","post","$router","push","error","status","errorMessage","message"],"sources":["/Users/purewa/Desktop/Pratice/Front_Pratice/vue-project/src/views/MemberCreate.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row justify=\"center\">\n            <v-col cols=\"6\">\n                <v-card-title class=\"text-h5 text-center\">\n                    회원가입\n                </v-card-title>\n                <v-card-text>\n                    <v-form>\n                        <v-text-field\n                            label=\"이름\"\n                            type=\"text\"\n                            v-model=\"name\"\n                            prepend-icon=\"mdi-account\"\n                        />\n                        <v-text-field\n                            label=\"이메일\"\n                            type=\"email\"\n                            v-model=\"email\"\n                            prepend-icon=\"mdi-email\"\n                            \n                        />\n                        <v-text-field\n                            label=\"비밀번호\"\n                            type=\"password\"\n                            v-model=\"password\"\n                            prepend-icon=\"mdi-lock\"\n                        />\n                        <v-row>\n                            <v-col>\n                                <!-- block : 속한 row에서 너비를 꽉채우는 옵션 -->\n                                <v-btn color=\"primary\" block @click=\"memberCreate()\">\n                                    등록\n                                </v-btn>\n                            </v-col>\n                        </v-row>\n                    </v-form>\n                </v-card-text>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data(){\n        return {\n            name: \"\",\n            email: \"\",\n            password:\"\",\n        }\n    },\n    methods:{\n        async memberCreate(){\n            // 입력값 검증\n            if (!this.name || !this.email || !this.password) {\n                alert('모든 필드를 입력해주세요.');\n                return;\n            }\n            \n            const data = {\n                name: this.name,\n                email: this.email,\n                password: this.password\n            };\n            \n            try {\n                console.log('전송 데이터:', data);\n                const response = await axios.post(\"http://localhost:8080/member/create\", data);\n                console.log('성공 응답:', response);\n                \n                alert('회원가입이 성공했습니다!');\n                // 로그인 페이지로 이동\n                this.$router.push('/member/login');\n                \n            } catch (error) {\n                console.error('전체 오류:', error);\n                \n                if (error.response) {\n                    console.error('상태코드:', error.response.status);\n                    console.error('오류 데이터:', error.response.data);\n                    \n                    // 백엔드에서 보낸 오류 메시지 표시\n                    const errorMessage = error.response.data.message || '회원가입에 실패했습니다.';\n                    alert(errorMessage);\n                } else {\n                    console.error('네트워크 오류:', error.message);\n                    alert('서버 연결에 실패했습니다.');\n                }\n            }\n        }\n    }\n}\n</script>"],"mappings":";AA4CA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAC;IACb;EACJ,CAAC;EACDC,OAAO,EAAC;IACJ,MAAMC,YAAYA,CAAA,EAAE;MAChB;MACA,IAAI,CAAC,IAAI,CAACJ,IAAG,IAAK,CAAC,IAAI,CAACC,KAAI,IAAK,CAAC,IAAI,CAACC,QAAQ,EAAE;QAC7CG,KAAK,CAAC,gBAAgB,CAAC;QACvB;MACJ;MAEA,MAAMN,IAAG,GAAI;QACTC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA;MACnB,CAAC;MAED,IAAI;QACAI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAER,IAAI,CAAC;QAC5B,MAAMS,QAAO,GAAI,MAAMV,KAAK,CAACW,IAAI,CAAC,qCAAqC,EAAEV,IAAI,CAAC;QAC9EO,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEC,QAAQ,CAAC;QAE/BH,KAAK,CAAC,eAAe,CAAC;QACtB;QACA,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MAEtC,EAAE,OAAOC,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAE9B,IAAIA,KAAK,CAACJ,QAAQ,EAAE;UAChBF,OAAO,CAACM,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACJ,QAAQ,CAACK,MAAM,CAAC;UAC7CP,OAAO,CAACM,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACJ,QAAQ,CAACT,IAAI,CAAC;;UAE7C;UACA,MAAMe,YAAW,GAAIF,KAAK,CAACJ,QAAQ,CAACT,IAAI,CAACgB,OAAM,IAAK,eAAe;UACnEV,KAAK,CAACS,YAAY,CAAC;QACvB,OAAO;UACHR,OAAO,CAACM,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACG,OAAO,CAAC;UACxCV,KAAK,CAAC,gBAAgB,CAAC;QAC3B;MACJ;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}