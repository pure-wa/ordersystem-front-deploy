{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { getErrorMessage, getResultData } from '@/utils/commonDataHandler';\nexport default {\n  data() {\n    return {\n      memberList: []\n    };\n  },\n  async created() {\n    try {\n      const accessToken = localStorage.getItem(\"accessToken\");\n\n      // 토큰 존재 여부 확인\n      if (!accessToken) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/member/login');\n        return;\n      }\n      console.log('사용할 토큰:', accessToken); // 디버깅용\n\n      const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/member/list`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n\n      // MemberListComponent.vue의 created()에 추가\n      this.memberList = getResultData(response);\n      console.log('회원 목록 데이터:', this.memberList); // 🔥 추가\n      console.log('첫 번째 회원:', this.memberList[0]); // 🔥 추가\n    } catch (error) {\n      console.log('오류 상세:', error.response);\n      if (error.response?.status === 401) {\n        // 토큰 만료 또는 인증 실패\n        localStorage.clear();\n        alert('로그인이 만료되었습니다. 다시 로그인해주세요.');\n        this.$router.push('/member/login');\n      } else {\n        alert(getErrorMessage(error));\n      }\n    }\n  },\n  methods: {}\n};","map":{"version":3,"names":["axios","getErrorMessage","getResultData","data","memberList","created","accessToken","localStorage","getItem","alert","$router","push","console","log","response","get","process","env","VUE_APP_API_BASE_URL","headers","Authorization","error","status","clear","methods"],"sources":["/Users/purewa/Desktop/Pratice/Front_Pratice/vue-project/src/components/MemberListComponent.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col>\n                <v-card>\n                    <v-card-title class=\"text-center text-h5\">\n                        회원목록\n                    </v-card-title>\n                    <v-card-text>\n                        <v-table>\n                            <thead>\n                                <tr>\n                                    <th>ID</th><th>이름</th><th>이메일</th><th>상세보기</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"member in memberList\" :key=\"member.id\">\n                                    <td>{{ member.id }}</td>\n                                    <td>{{ member.name }}</td>\n                                    <td>{{ member.email }}</td>\n                                    <td><v-btn :to=\"`/member/detail/${member.id}`\">상세보기</v-btn></td>\n                                </tr>\n                            </tbody>\n                        </v-table>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getErrorMessage, getResultData } from '@/utils/commonDataHandler';\n\n    export default {\n        data() {\n            return {\n                memberList: [],\n            }\n        },\n        async created(){\n    try{\n        const accessToken = localStorage.getItem(\"accessToken\");\n        \n        // 토큰 존재 여부 확인\n        if (!accessToken) {\n            alert('로그인이 필요합니다.');\n            this.$router.push('/member/login');\n            return;\n        }\n        \n        console.log('사용할 토큰:', accessToken); // 디버깅용\n        \n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/member/list`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        });\n        \n        // MemberListComponent.vue의 created()에 추가\nthis.memberList = getResultData(response);\nconsole.log('회원 목록 데이터:', this.memberList); // 🔥 추가\nconsole.log('첫 번째 회원:', this.memberList[0]); // 🔥 추가\n        \n    } catch(error) {\n        console.log('오류 상세:', error.response);\n        \n        if (error.response?.status === 401) {\n            // 토큰 만료 또는 인증 실패\n            localStorage.clear();\n            alert('로그인이 만료되었습니다. 다시 로그인해주세요.');\n            this.$router.push('/member/login');\n        } else {\n            alert(getErrorMessage(error));\n        }\n    }\n}\n        ,\n        methods: {\n            \n\n        }\n    }\n</script>"],"mappings":";AAgCA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,eAAe,EAAEC,aAAY,QAAS,2BAA2B;AAEtE,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,UAAU,EAAE;IAChB;EACJ,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAE;IACnB,IAAG;MACC,MAAMC,WAAU,GAAIC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;;MAEvD;MACA,IAAI,CAACF,WAAW,EAAE;QACdG,KAAK,CAAC,aAAa,CAAC;QACpB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;QAClC;MACJ;MAEAC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEP,WAAW,CAAC,EAAE;;MAErC,MAAMQ,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,cAAc,EAAE;QAChFC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUd,WAAW;QACxC;MACJ,CAAC,CAAC;;MAEF;MACR,IAAI,CAACF,UAAS,GAAIF,aAAa,CAACY,QAAQ,CAAC;MACzCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAACT,UAAU,CAAC,EAAE;MAC5CQ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACT,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;IAEzC,EAAE,OAAMiB,KAAK,EAAE;MACXT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEQ,KAAK,CAACP,QAAQ,CAAC;MAErC,IAAIO,KAAK,CAACP,QAAQ,EAAEQ,MAAK,KAAM,GAAG,EAAE;QAChC;QACAf,YAAY,CAACgB,KAAK,CAAC,CAAC;QACpBd,KAAK,CAAC,2BAA2B,CAAC;QAClC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MACtC,OAAO;QACHF,KAAK,CAACR,eAAe,CAACoB,KAAK,CAAC,CAAC;MACjC;IACJ;EACJ;EAEQG,OAAO,EAAE,CAGT;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}