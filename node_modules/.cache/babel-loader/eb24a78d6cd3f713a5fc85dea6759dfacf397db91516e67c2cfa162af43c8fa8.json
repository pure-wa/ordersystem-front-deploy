{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", null, \"hook 실습\", -1 /* CACHED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.moveScreen())\n  }, \"다른 화면으로 화면 이동\"), _createElementVNode(\"h1\", null, _toDisplayString($data.count1), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.incrementCount())\n  }, \"count1 증가\"), _createCommentVNode(\" computed를 통해 계산된 함수의 결과값은 함수명 그대로를 변수처럼 사용 가능 \"), _createElementVNode(\"h1\", null, \"computed된 값: \" + _toDisplayString($options.doubleCount), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","onClick","_cache","$event","$options","moveScreen","_toDisplayString","$data","count1","incrementCount","_createCommentVNode","doubleCount"],"sources":["/Users/purewa/Desktop/Pratice/Front_Pratice/vue-project/src/components/practice/3.HookComponent.vue"],"sourcesContent":["<template>\n    <h1>hook 실습</h1>\n    <button @click=\"moveScreen()\">다른 화면으로 화면 이동</button>\n    <h1>{{ count1 }}</h1>\n    <button @click=\"incrementCount()\">count1 증가</button>\n    <!-- computed를 통해 계산된 함수의 결과값은 함수명 그대로를 변수처럼 사용 가능 -->\n    <h1>computed된 값: {{ doubleCount }}</h1>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                count1: 0,\n            }\n        },\n        // 화면이 열리기 직전(vue인스턴스가 생성되기 전)에 실행되는 함수\n        // 예시) 목록조회, 상세조회\n        // created() {\n        //     alert(\"created 테스트\")\n        // },\n\n        // 컴포넌트가 화면상에서 제거될 때, 실행되는 함수\n        // 예시) 채팅화면을 벗어나 다른화면으로 이동시에 실시간 연결 종료\n        // beforeUnmount(){\n        //     alert(\"화면종료\");\n        // },\n\n        // 종송된 데이터가 변경될 때, 함수를 다시 실행하여 값을 계산해서 리턴하는 함수\n        // 예시) 장바구니 수량 보여줄 때, \n        computed: { // computing해서 값을 리턴\n            // this.count1 변경되면, doubleCount값이 변하는 로직\n            doubleCount(){\n                return this.count1 * 2;\n            }\n        },\n\n        // 특정 변수값의 변경사항을 인지하여 함수를 실행하는 hook함수\n        // 예시) 검색어 입력 시, 자동 api 호출\n        // watch: {\n        //     // 인지하고자 하는 변수값과 일치되는 함수명 사용\n        //     count1() {\n        //         alert(\"watch함수 실행\")\n        //     }\n        // },\n\n        // 화면 전체 중 어딘가의 변경사항을 인지하는 hook 함수\n        updated() {\n            alert(\"update함수 호출\")\n        },\n        methods: {\n            moveScreen() {\n                this.$router.push(\"/practice/vuetify\");\n            },\n            incrementCount() {\n                this.count1++;\n            }\n        }\n    }\n</script>"],"mappings":";;uFACIA,mBAAA,CAAgB,YAAZ,SAAO,qBACXA,mBAAA,CAAoD;IAA3CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU;KAAI,eAAa,GAC3CL,mBAAA,CAAqB,YAAAM,gBAAA,CAAdC,KAAA,CAAAC,MAAM,kBACbR,mBAAA,CAAoD;IAA3CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAK,cAAc;KAAI,WAAS,GAC3CC,mBAAA,mDAAsD,EACtDV,mBAAA,CAAuC,YAAnC,eAAa,GAAAM,gBAAA,CAAGF,QAAA,CAAAO,WAAW,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}